{"version":3,"sources":["Rater.js","App.js","serviceWorker.js","index.js"],"names":["Rater","useState","rating","setRating","hover","setHover","value","iconValue","setIconValue","onChange","e","Number","target","Array","from","index","map","key","icon","i","type","name","onClick","className","color","size","onMouseEnter","onMouseLeave","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RA+CeA,G,MA1CD,WAAO,IAAD,EACYC,mBAAS,MADrB,mBACTC,EADS,KACDC,EADC,OAEUF,mBAAS,MAFnB,mBAETG,EAFS,KAEFC,EAFE,OAGAJ,mBAAS,KAAlBK,EAHS,sBAIkBL,mBAAS,GAJ3B,mBAITM,EAJS,KAIEC,EAJF,KAOhB,OACI,6BACI,4BAAQC,SAAU,SAACC,GAClBF,EAAaG,OAAOD,EAAEE,OAAON,UACxBO,MAAMC,KAAK,IAAID,MAAMP,IAAO,SAACA,EAAOS,GAAR,OAC1BA,EAAQ,KAAGC,KAAI,SAAAV,GAAK,OAAI,4BACxBW,IAAKX,EAAOA,MAAOA,GAAQA,OAEnC,wDAGC,YAAKO,MAAMN,IAAYS,KAAI,SAACE,EAAMC,GAC/B,IAAMb,EAAQa,EAAI,EAElB,OACI,+BACI,2BAAOC,KAAK,QACLC,KAAK,SACLf,MAAOA,EACPgB,QAAS,kBAAMnB,EAAUG,MAEhC,kBAAC,IAAD,CACQiB,UAAU,OACVC,MAAOlB,IAAUF,GAASF,GAAU,UAAY,UAChDuB,KAAM,IACNC,aAAc,kBAAMrB,EAASC,IAC7BqB,aAAc,kBAAMtB,EAAS,gBC1B9CuB,MARf,WACE,OACE,yBAAKL,UAAU,OACd,kBAAC,EAAD,QCKeM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.58bac3c8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {FaStar} from \"react-icons/all\";\r\nimport './Rater.css'\r\n\r\n\r\nconst Rater = () => {\r\n    const [rating, setRating] = useState(null)\r\n    const [hover, setHover] = useState(null)\r\n    const [value] = useState(100)\r\n    const [iconValue, setIconValue] = useState(5)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <select onChange={(e) =>\r\n            {setIconValue(Number(e.target.value))}}>\r\n                { Array.from(new Array(value),(value, index) =>\r\n                    index + 1).map(value => <option\r\n                    key={value} value={value}>{value}</option>) }\r\n            </select>\r\n            <h1> Select Amount of Icons </h1>\r\n\r\n\r\n            {[... Array(iconValue)].map((icon, i) => {\r\n                const value = i + 1\r\n\r\n                return (\r\n                    <label>\r\n                        <input type='radio'\r\n                               name='rating'\r\n                               value={value}\r\n                               onClick={() => setRating(value)}\r\n                        />\r\n                        <FaStar\r\n                                className='star'\r\n                                color={value <= (hover || rating) ? '#ffc107' : '#e4e5e9'}\r\n                                size={100}\r\n                                onMouseEnter={() => setHover(value)}\r\n                                onMouseLeave={() => setHover(null)}\r\n                        />\r\n                    </label>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rater\r\n","import React from 'react';\nimport './App.css';\nimport Rater from \"./Rater\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Rater />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}